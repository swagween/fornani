name: Build

on: [push, pull_request]

defaults:
  run:
    shell: bash

jobs:
  build:
    name: ${{ matrix.platform.name }} ${{ matrix.config.name }}
    runs-on: ${{ matrix.platform.os }}
    env:
      CMAKE_BUILD_PARALLEL_LEVEL: 4

    strategy:
      fail-fast: false
      matrix:
        platform:
          - { name: "Windows VS2022", os: windows-2022, shell: cmd, init: 'call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\Common7\Tools\VsDevCmd.bat"' }
          - { name: "Linux GCC",      os: ubuntu-latest, shell: bash, init: "" }
          - { name: "Linux Clang",    os: ubuntu-latest, shell: bash, flags: "-DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++", init: "" }
          - { name: "macOS AppleClang", os: macos-latest, shell: bash, init: "" }
        config:
          - { name: Static, flags: "-DBUILD_SHARED_LIBS=FALSE" }

    steps:
      - name: Install Dependencies
        shell: bash
        run: |
          if [[ "$RUNNER_OS" == "Windows_NT" ]]; then
            choco install ninja -y
          elif [[ "$RUNNER_OS" == "Linux" ]]; then
            sudo apt-get update
            sudo apt-get install -y ninja-build libxrandr-dev libxcursor-dev libxi-dev libudev-dev libflac-dev libvorbis-dev libgl1-mesa-dev libegl1-mesa-dev libfreetype-dev
          elif [[ "$RUNNER_OS" == "macOS" ]]; then
            brew install ninja
          else
            echo "Unsupported OS: $RUNNER_OS"
            exit 1
          fi

      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure
        shell: ${{ matrix.platform.shell }}
        run: |
          ${{ matrix.platform.init }}
          cmake -B build -G "Ninja Multi-Config" ${{ matrix.platform.flags }} ${{ matrix.config.flags }}

      - name: Build
        shell: ${{ matrix.platform.shell }}
        run: |
          ${{ matrix.platform.init }}
          cmake --build build --config Release
