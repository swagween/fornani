name: Build

on: [push, pull_request]

defaults:
  run:
    shell: bash

jobs:
  build:
    name: ${{ matrix.platform.name }} ${{ matrix.config.name }}
    runs-on: ${{ matrix.platform.os }}
    env:
      CMAKE_BUILD_PARALLEL_LEVEL: 4

    strategy:
      fail-fast: false
      matrix:
        platform:
          - { name: Windows VS2022, os: windows-2022 }
          - { name: Linux GCC,      os: ubuntu-latest }
          - { name: Linux Clang,    os: ubuntu-latest, flags: -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ }
          - { name: macOS AppleClang, os: macos-latest }
        config:
          - { name: Static, flags: -DBUILD_SHARED_LIBS=FALSE }

    steps:
    - name: Install Linux Dependencies
      if: runner.os == 'Linux'
      run: sudo apt-get update && sudo apt-get install libxrandr-dev libxcursor-dev libxi-dev libudev-dev libflac-dev libvorbis-dev libgl1-mesa-dev libegl1-mesa-dev libfreetype-dev ninja-build

    - name: Install Ninja (Windows)
      if: runner.os == 'Windows'
      run: choco install ninja

    - name: Install Ninja (macOS)
      if: runner.os == 'macOS'
      run: brew install ninja

    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure (Windows)
      if: runner.os == 'Windows'
      shell: cmd
      run: |
        call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\Common7\Tools\VsDevCmd.bat"
        cmake -B build -G "Ninja Multi-Config" %matrix.platform.flags% %matrix.config.flags%

    - name: Configure (Non-Windows)
      if: runner.os != 'Windows'
      run: cmake -B build -G "Ninja Multi-Config" ${{ matrix.platform.flags }} ${{ matrix.config.flags }}

    - name: Build (Windows)
      if: runner.os == 'Windows'
      shell: cmd
      run: |
        call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\Common7\Tools\VsDevCmd.bat"
        cmake --build build --config Release

    - name: Build (Non-Windows)
      if: runner.os != 'Windows'
      run: cmake --build build --config Release
